TODOs
These are obviously not all inclusive, just a few next steps. 

Make a class (or modify expression) to take in an expression object and output
the javascript equivalent. -- Take a look at the expressions method in server.py
to get a sense of the js it should return.

Create an interface for inputting expressions -- the big thing with this is
figuring out how to get the components separated. Whether the user simply enters
in components separately, whether we have a way for them to split up an
expression, or whether we try to do that automatically on the backend, and then
have them modify it after they can see the graphs.

Have sane default values for expressions when they're sent to the frontend.

Figure out scaling issues of the graph such that it's easy to compare between
graphs.

Push computeData down to the expression model in backbone, the API for that
should be something like: expression.computeData('x', -1, 1, .01) where -1 - 1
is the range of x and .01 is the step size.

Decide upon and begin to implement a better interface for the comparison view. I
have some sketches of this, lets talk.

